Sub Main
'	argument = 1
	argument = Val(Left$(ListVar2,InStr(ListVar2+"\","\")-1))

	command_info = Left$(ListVar1,InStr(ListVar1+"\","\")-1)
	go_forward = IIf(Mid$(command_info,1,1) = "+", True, False)
	target_start = IIf(Mid$(command_info,2,1) = "s", True, False)
	action = Mid$(command_info,3,1)

	' look at text ahead of point in direction direction:
	ahead = word_peek(go_forward)
	If ahead = "" Then
		' nothing ahead or peek failed; abort
		Beep
		Exit Sub
	End If

	' calculate offset to targeted point:
	If Not go_forward Then
		ahead = StrReverse(ahead)
		target_start = Not target_start
	End If
	offset = 0
	For I = 1 To argument
		If target_start Then
			offset = word_start(ahead, offset)
		Else
			offset = word_end(ahead, offset)
		End If
		If offset < 0 Then
			Exit For
		End If
	Next

	If offset < 0 Then
		' no target found
		Beep
		Exit Sub
	End If

	' compute text covered between point and target (from left to right)
	covered = Left$(ahead, offset)
	If Not go_forward Then
		covered = StrReverse(covered)
	End If

	If action = "m" Then
		keys = move(go_forward, offset)
	ElseIf action = "d" Then
		keys = delete(go_forward, offset)
		Clipboard(covered)
	Else
		Beep
	End If

	SendDragonKeys keys

	' for debugging:
	ahead = Replace(ahead, " ", ".")
	ahead = Replace(ahead, Chr(13), "!")
	' MsgBox "'" + ahead + "' " + Len(ahead) + " " + Str(offset) + " '" + covered + "'"
End Sub


Function repeat_keys(forward_prefix, backward_prefix, go_forward, distance) As String
	If distance < 0 Then
		go_forward = Not go_forward
		distance = -distance
	End If

	repeat_keys = "{" + IIf(go_forward, forward_prefix, backward_prefix) + Str(distance) + "}"
End Function

Function move(go_forward, distance) As String
	move = repeat_keys("right", "left", go_forward, distance)
End Function

Function select_move(go_forward, distance) As String
	select_move = repeat_keys("shift+right", "shift+left", go_forward, distance)
End Function

Function delete(go_forward, distance) As String
	delete = repeat_keys("Del", "backspace", go_forward, distance)
End Function


' is character a word separator?  I.e., does it occur between words rather than in them
Function is_separator_character(character) As Boolean
	If InStr("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'$%", character) = 0 Then
		is_separator_character = True
	Else
		is_separator_character = False
	End If
End Function

Function word_start(selection, offset) As Integer
	previous_is_separator = False
	While offset < Len(selection)
		character = Mid(selection, offset+1, 1)
		current_is_separator = is_separator_character(character)
		If previous_is_separator And (Not current_is_separator) Then
			word_start = offset
			Exit Function
		End If
		offset = offset + 1
		previous_is_separator = current_is_separator
	Wend

	word_start = -1
End Function

Function word_end(selection, offset) As Integer
	previous_is_separator = True
	While offset < Len(selection)
		character = Mid(selection, offset+1, 1)
		current_is_separator = is_separator_character(character)
		If (Not previous_is_separator) And current_is_separator Then
			word_end = offset
			Exit Function
		End If
		offset = offset + 1
		previous_is_separator = current_is_separator
	Wend

	word_end = -1
End Function


' peek functions =======================================================

Function word_peek(go_forward) As String
'	this version of peek is optimized for word; it may not work for any other application

'	this function may change what line Word's cursor is on, but not where the point is located
'	  (when the point is at the beginning of a line, the cursor may be at the beginning of that line or the far end
'	   (beyond the newline or space) of the previous Line.)

'	old = Clipboard()
	Clipboard("")  ' in case copy fails

	trust_ending_return = False
	If go_forward Then
		' arbitrary extension below is OK so long as it guarantees a non-zero Word selection (the Clipboard may be empty):
		SendDragonKeys "{shift+end}{shift+right 2}{shift+end}{shift+right 2}{ctrl+c}"
	'SendDragonKeys "{shift+end}{shift+right 2}{ctrl+c}"
		selection = Replace$(Clipboard(), Chr(10), "")
		If selection = "" Then
			selection = Chr(13)  ' all Word documents end with a new line
		End If
	Else
		' below must produce at most one carriage return:
		SendDragonKeys "{shift+home}{shift+left}{shift+home}{ctrl+c}"
		selection = Replace$(Clipboard(), Chr(10), "")
		If InStr(selection, Chr(13)) >= Len(selection) Then
			trust_ending_return = True
		End If
	End If

	If selection = "" Then
		word_peek = ""
		Exit Function
	End If

	If (Not trust_ending_return) And (Len(selection) > 0) Then
		If Mid$(selection, Len(selection), 1) = Chr(13) Then
			selection = Left$(selection, Len(selection)-1)
		End If
	End If
	word_peek = selection

	' undo selection, leaving point in original location
	SendDragonKeys move(Not go_forward, 1)
End Function


Function peek3(go_forward) As String
'	this should work for anything except (in rare cases) command browser
'	  (can fail on lines with more than eight spaces or tabs at the beginning)
'	requires a modifiable field, leaves spaces if field doesn't support {ctrl+c}

'	old = Clipboard()
	Clipboard("")  ' in case copy fails

	fixup = ""
	extra_end = 0
	extra_front = 0
	If go_forward Then
		keys = "<>{left}{shift+end}{shift+left}"
		fixup = "{backspace}{Del}"
		extra_front = 1
	Else
		keys = "<>{left}{shift+home}"
		fixup = "{backspace}{Del}"
		extra_end = 1
	End If

	SendDragonKeys keys + "{ctrl+c}"
	selection = Replace$(Clipboard(), Chr(10), "")

	If selection = "" Then
		peek3 = ""
		Exit Function
	End If

	fixup = select_move(Not go_forward, Len(selection)) + fixup

	selection = Left(selection, Len(selection)-extra_end)
	peek3 = Right(selection, Len(selection)-extra_front)

	' undo selection, leaving point in original location
	SendDragonKeys fixup
End Function
