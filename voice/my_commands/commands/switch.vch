### 
### Lists and functions for switching between applications/Windows.
### 

include "control.vch";
include "environment.vch";



## 
## Procedures for switching windows/applications:
## 

include "AutoHotkey.vch";


#
# Attempt to switch to a given window; if fail, run $otherwise:
#
SwitchTo2(name, otherwise) := Variable.Set(window:old, Window.ID())
                              Window.Go_($name)
                              If(Window.Success(), "", $otherwise);
#SwitchTo2(name, otherwise) := AutoHotkeyForce1(switch, $name) 


#
# Switch to a given window or produce an error dialog box which fades
# after a few seconds.
#
SwitchTo(name) := SwitchTo2($name,
	                    AutoHotkeyAsync3(async_message,
		                "SwitchTo", "$name: no such window found", 3)
                            Vocola.Abort());

#
# Switch to window with name name if it exists, otherwise create it
# via AppBringUp:
#
SwitchToApp(name, app) := SwitchTo2($name, AppBringUp($name, $app));


# 
# Switch to window were at before last SwitchTo command:
# 
OldWindow() := Variable.Set(:target, Variable.Get(window:old))
	       SwitchTo(ID> Variable.Get(:target));



## 
## Designatable windows:
## 

<area> := (blue | black | purple | brown | crimson | # gray is confused with red
           West | East | North | South );

AreaTitle(color) := Variable.Get($color _area_title, 
                                 If(EQ($color, black),
				    IfHome("^xterm whiskey$","^xterm foxtrot$"),
				    If(EQ($color, blue),
				       "^startup xterm$",
                                       "$color window not set yet")));

  SetArea(color) := Variable.Set  ($color _area_title, ID> Window.ID());
ResetArea(color) := Variable.Unset($color _area_title);

   GoArea(color) := SwitchTo(AreaTitle($color));



## 
## Distinguishers for application instances:
## 

<window_suffix> := (
       Alpha
     | Bravo
     | Charlie
     | Delta
     | Echo
     | foxtrot
     | golf
     | Hotel
     | India
     | Juliet
     | kilo
     | Lima
     | Mike
     | November
     | Oscar
     | Papa
     | Romeo
     | Sierra
     | tango
     | uniform
     | Victor
     | whiskey
     | x-ray
     | Yankee
     | Zulu
);


<emacs_color> := ( red   = "work emacs"    | orange = "secondary emacs"
	      	 | green = "green emacs"   | yellow = "yellow emacs"    
		 | white = "PC emacs"
	         | pink  = "foil emacs"
	         );



InternetExplorerPattern() := "Internet Explorer$";

<browser> := ( IE                = InternetExplorerPattern() ",iexplore.exe"
             | Internet Explorer = InternetExplorerPattern() ",iexplore.exe"
             | Firefox           = "Mozilla Firefox$,firefox.exe"
	     | chrome		 = "Google Chrome$,chrome.exe"
             );

DefaultBrowser()         := "Google Chrome$,chrome.exe";

BringUpBrowser (browser) := SwitchToApp(Split($browser, ',', 0),
	       		    		Split($browser, ',', 1));


FolderPattern() := "class>ExploreWClass|CabinetWClass";



## 
## Mailing clipboard to someone; leaves point at end of subject line:
## 

DefaultMailContext() := IfHome("foil","work") " emacs";

<context_mail> := ( work  mail="work emacs" | personal mail="foil emacs" 
	          | local mail="PC emacs"
	          |       mail=DefaultMailContext() );


MailClipboard(mail_context, recipients) := 
	SwitchTo(^$mail_context$)
        {esc}x message-mail{enter}
	{esc}> {enter}{ctrl+y}{down}
	{esc}< {ctrl+s}To:{enter}      {end} 
	Replace($recipients, ",", ", ")
	{esc}< {ctrl+s}Subject:{enter} {end};
