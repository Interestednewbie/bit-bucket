### 
### Voice commands for switching to (then back from) a different shell
### window than the current one and possibly executing some commands.
### 
### 
### Includer must define Save() -- can be "".
### 

include "switch.vch";
include "printables.vch";


### 
### Operations:
### 

#Paste()     := {shift+Ins};  # need universal paste <<<>>>
Paste()     := If(Window.Match("command prompt"),
	          {alt+space}ep, {shift+Ins});

Interrupt() := {ctrl+c}q{ctrl+c} Wait(100);


<op> := ( repeat        = {up}  {enter}
        | repeat 2      = {up_2}{enter}
        | repeat 3      = {up_3}{enter}

        | paste         = Paste()
        | paste line    = PrintablesToKeys(Replace(Clipboard.Get(), 
	                                           Eval("chr(13)"), "")) {enter}
            # special case; short for "dump paste"
        | dump          = Paste() OldWindow()

            # for use with Ruby's irb:
        | load          = {ctrl+r} load {ctrl+e} {enter}
            # for use with browsers:
        | reload        = {ctrl+r}
	| space         = {space}


	| stop          = Interrupt()
        | make          = Interrupt() make{enter}
        | make test     = Interrupt() "make test" {enter}
	   # create a do_test alias for this:
	| do test       = Interrupt() "do_test" {enter}
        | make parallel = Interrupt() "make clean; make -j" {enter}
        | latex         = Interrupt() "make clean; make; make" {enter}  # <<<>>>
        | hard repeat   = Interrupt() {up}{enter}
            # special case; short for "dump hard repeat"
        | again hard    = Interrupt() {up}{enter}  OldWindow()

	| close window  = HeardWord(close, window) OldWindow() # <<<>>>
	);

<dump> := ( dump=OldWindow() | send=OldWindow() );



### 
### Target shells:
### 

## 
## Designatable windows:
## 

  set <area>  area                  =   SetArea($1);
reset <area>  area                  = ResetArea($1);

      <area>  area  [[<dump>] <op>] = GoArea($1) $3 $2;

      <area>  save                  = Save() GoArea($1);
      <area> [save]  [<dump>] <op>  = Save() GoArea($1) $3 $2;


## 
## Instances of xterm:
## 

# see commands for creating xterms in Unix_shell.vch, _switch.vcl

startup xterm         [[<dump>] <op>] = SwitchTo("^startup xterm$") $2 $1;
xterm <window_suffix> [[<dump>] <op>] = SwitchTo("^xterm $1$")      $3 $2;

Cygwin  xterm                         = SwitchTo("^Cygwin xterm$");  # <<<>>>


## 
## Windows command prompt instances:
## 

   Prompt(window_suffix) := SwitchTo   ("command prompt $window_suffix");
NewPrompt(window_suffix) := SwitchToApp("command prompt $window_suffix",
                            'cmd.exe /k "title command prompt $window_suffix"');

new command prompt [<window_suffix>] = NewPrompt(When($1,$1,Alpha));
    command prompt [<window_suffix>] =    Prompt(When($1,$1,Alpha));

command prompt [<dump>] <op> = Prompt(Alpha) $2 $1;


new admin [command] prompt = Keys.SendInput({win+x}) Wait(500) a;
    admin [command] prompt = 
        SwitchTo(title>.*Administrator.*\n app>cmd.exe);


## 
## Instances of Emacs:
## 

  # DNS sometimes has trouble finding Emacs for some reason...
(start emacs|new white area) = 
    AppBringUp("^PC emacs$", '"' PCfromPC(~pf32\Emacs\bin\runemacs.exe) '"');

<emacs_color> area [[<dump>] <op>] = SwitchTo(^$1$) $3 $2;


## 
## Putty instances:
## 

include "machines.vch";

<machine> putty = SwitchToApp(ShortMachine($1) ".* PuTTY", 
    PCfromPC(~pf32/PuTTy/putty.exe) " -load no-password -l mdl $1");
force <machine> putty = AppBringUp(ShortMachine($1) ".* PuTTY",
    PCfromPC(~pf32/PuTTy/putty.exe) " -load no-password -l mdl $1");

<machine> putty [<dump>] <op> = SwitchTo(ShortMachine($1) ".* PuTTY") $3$2;

close inactive putty = 
   Window.Go_("^PuTTY Fatal Error$") If(Window.Success(),{enter})
   SwitchTo("^PuTTY \(inactive\)$")  {alt+f4};
