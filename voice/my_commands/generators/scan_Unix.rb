### 
### Generate a list of UNIX directories with optional special names
### and priorities based on the scan recipe.
### 

raw_scan_recipe = File.read("/home/#{ENV['USER']}/voice/my_commands/commands/filesystem/Unix_scan_recipe.txt")

scan_recipe = raw_scan_recipe.gsub(/\s*(\#.*)?$/, "").sub(/^\s*\n/, "").
  split(/\n/).collect { |x| x.split(/,\s*/) }

  # these only apply to entries without special names:
excludes = [ %r_/\._, %r_deduplication/.*/sqlite_ ]  # on pathnames



def children directory
  Dir.open(directory).reject{|x| x=~/^\.\.?$/ }.collect{|x| "#{directory}/#{x}"}.sort
end

def directories files
  files.reject { |x| !File.directory?(x) }
end

def expand(directory, depth)
  results   = [directory]
  pending   = results
  # breath first search:
  while depth>0 && pending.length>0 do
    pending = pending.collect { |x| directories(children(x)) }.
                      inject(Array.new(0)) { |x,y| x+y }
    results += pending
    depth   -= 1
  end
  results
end



puts <<BANNER
###
### WARNING: this file was automatically generated by scan_Unix.rb!
###
### Do not edit!
###

BANNER


priority = 0
scan_recipe.each do |pathname, name_or_depth|
  priority -= 1

  real_path = pathname.sub(/~/, "/home/#{ENV['USER']}")
  if name_or_depth =~ /^[0-9]*$/ then
    name  = nil
    depth = name_or_depth.to_i 
  else
    name  = name_or_depth
    depth = nil
  end
  

  if not name then
    #next unless File.exist?(real_path) 
    #next unless File.directory?(real_path)

    next if excludes.any? { |x| pathname =~ x } 
  end


  if depth then
    next unless depth == 0 or File.directory?(real_path) 

    expand(real_path, depth).each do |descendent|
      next if excludes.any? { |x| descendent =~ x } 

      descendent = descendent.sub(%r|^/home/#{ENV['USER']}|, "~")
      puts "#{descendent},,#{priority}"
    end
  else
    puts "#{pathname},#{name},#{priority}"
  end
end
